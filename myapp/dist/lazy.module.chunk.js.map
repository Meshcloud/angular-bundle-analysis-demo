{"version":3,"sources":["/Users/jr/dev/demo/explore-ng-bundles/myapp/src/app/lazy/lazy.module.ts","/Users/jr/dev/demo/explore-ng-bundles/myapp/node_modules/rxjs/_esm5/scheduler/AsyncAction.js.pre-build-optimizer.js","/Users/jr/dev/demo/explore-ng-bundles/myapp/node_modules/rxjs/_esm5/scheduler/Action.js.pre-build-optimizer.js","/Users/jr/dev/demo/explore-ng-bundles/myapp/node_modules/rxjs/_esm5/scheduler/async.js","/Users/jr/dev/demo/explore-ng-bundles/myapp/node_modules/rxjs/_esm5/scheduler/AsyncScheduler.js.pre-build-optimizer.js","/Users/jr/dev/demo/explore-ng-bundles/myapp/node_modules/rxjs/_esm5/Scheduler.js.pre-build-optimizer.js","/Users/jr/dev/demo/explore-ng-bundles/myapp/node_modules/rxjs/_esm5/add/observable/interval.js","/Users/jr/dev/demo/explore-ng-bundles/myapp/node_modules/rxjs/_esm5/observable/IntervalObservable.js.pre-build-optimizer.js","/Users/jr/dev/demo/explore-ng-bundles/myapp/node_modules/rxjs/_esm5/util/isNumeric.js","/Users/jr/dev/demo/explore-ng-bundles/myapp/node_modules/rxjs/_esm5/observable/interval.js","/Users/jr/dev/demo/explore-ng-bundles/myapp/node_modules/rxjs/_esm5/operators/pairwise.js.pre-build-optimizer.js","/Users/jr/dev/demo/explore-ng-bundles/myapp/node_modules/rxjs/_esm5/add/operator/pairwise.js","/Users/jr/dev/demo/explore-ng-bundles/myapp/node_modules/rxjs/_esm5/operator/pairwise.js","/Users/jr/dev/demo/explore-ng-bundles/myapp/node_modules/rxjs/_esm5/operators/take.js.pre-build-optimizer.js","/Users/jr/dev/demo/explore-ng-bundles/myapp/node_modules/rxjs/_esm5/add/operator/take.js","/Users/jr/dev/demo/explore-ng-bundles/myapp/node_modules/rxjs/_esm5/operator/take.js","/Users/jr/dev/demo/explore-ng-bundles/myapp/src/app/lazy/my-lazy/my-lazy.component.ts","/Users/jr/dev/demo/explore-ng-bundles/myapp/src/app/lazy/my-lazy/my-lazy.component.ngfactory.js.pre-build-optimizer.js","/Users/jr/dev/demo/explore-ng-bundles/myapp/src/app/lazy/my-lazy/my-lazy.component.scss.shim.ngstyle.js.pre-build-optimizer.js","/Users/jr/dev/demo/explore-ng-bundles/myapp/src/app/lazy/my-lazy/my-lazy.component.html","/Users/jr/dev/demo/explore-ng-bundles/myapp/src/app/lazy/lazy-routing.module.ts","/Users/jr/dev/demo/explore-ng-bundles/myapp/src/app/lazy/lazy.module.ngfactory.js.pre-build-optimizer.js"],"names":["LazyModule","AsyncAction_AsyncAction","_super","AsyncAction","scheduler","work","call","this","pending","Object","tslib_es6","prototype","schedule","state","delay","closed","id","recycleAsyncId","requestAsyncId","root","setInterval","flush","bind","clearInterval","execute","Error","error","_execute","errored","errorValue","undefined","e","unsubscribe","_unsubscribe","actions","index","indexOf","splice","Action","async_async","AsyncScheduler","apply","arguments","active","scheduled","action","push","shift","Scheduler","SchedulerAction","now","Date","Observable","interval","IntervalObservable","period","val","isArray","parseFloat","create","dispatch","subscriber","next","_subscribe","add","PairwiseOperator","source","subscribe","pairwise_PairwiseSubscriber","PairwiseSubscriber","destination","hasPrev","_next","value","prev","Subscriber","pairwise","lift","take_TakeOperator","TakeOperator","total","ArgumentOutOfRangeError","take_TakeSubscriber","TakeSubscriber","count","complete","take","EmptyObservable","my_lazy_component_MyLazyComponent","MyLazyComponent","ngOnInit","console","log","RenderType_MyLazyComponent","core","encapsulation","styles","data","View_MyLazyComponent_0","_l","MyLazyComponentNgFactory","_ck","_v","LazyRoutingModule","__webpack_require__","d","__webpack_exports__","LazyModuleNgFactory","common","router","path","component"],"mappings":"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","file":"lazy.module.chunk.js","sourcesContent":["import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\nimport { LazyRoutingModule } from './lazy-routing.module';\nimport { MyLazyComponent } from './my-lazy/my-lazy.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    LazyRoutingModule\n  ],\n  declarations: [MyLazyComponent]\n})\nexport class LazyModule { }\n\n\n\n// WEBPACK FOOTER //\n// /Users/jr/dev/demo/explore-ng-bundles/myapp/src/app/lazy/lazy.module.ts","/** PURE_IMPORTS_START .._util_root,._Action PURE_IMPORTS_END */\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b)\n        if (b.hasOwnProperty(p))\n            d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nimport { root } from '../util/root';\nimport { Action } from './Action';\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nexport var AsyncAction = /*@__PURE__*/ (/*@__PURE__*/ function (_super) {\n    __extends(AsyncAction, _super);\n    function AsyncAction(scheduler, work) {\n        _super.call(this, scheduler, work);\n        this.scheduler = scheduler;\n        this.work = work;\n        this.pending = false;\n    }\n    AsyncAction.prototype.schedule = function (state, delay) {\n        if (delay === void 0) {\n            delay = 0;\n        }\n        if (this.closed) {\n            return this;\n        }\n        // Always replace the current state with the new state.\n        this.state = state;\n        // Set the pending flag indicating that this action has been scheduled, or\n        // has recursively rescheduled itself.\n        this.pending = true;\n        var id = this.id;\n        var scheduler = this.scheduler;\n        //\n        // Important implementation note:\n        //\n        // Actions only execute once by default, unless rescheduled from within the\n        // scheduled callback. This allows us to implement single and repeat\n        // actions via the same code path, without adding API surface area, as well\n        // as mimic traditional recursion but across asynchronous boundaries.\n        //\n        // However, JS runtimes and timers distinguish between intervals achieved by\n        // serial `setTimeout` calls vs. a single `setInterval` call. An interval of\n        // serial `setTimeout` calls can be individually delayed, which delays\n        // scheduling the next `setTimeout`, and so on. `setInterval` attempts to\n        // guarantee the interval callback will be invoked more precisely to the\n        // interval period, regardless of load.\n        //\n        // Therefore, we use `setInterval` to schedule single and repeat actions.\n        // If the action reschedules itself with the same delay, the interval is not\n        // canceled. If the action doesn't reschedule, or reschedules with a\n        // different delay, the interval will be canceled after scheduled callback\n        // execution.\n        //\n        if (id != null) {\n            this.id = this.recycleAsyncId(scheduler, id, delay);\n        }\n        this.delay = delay;\n        // If this action has already an async Id, don't request a new one.\n        this.id = this.id || this.requestAsyncId(scheduler, this.id, delay);\n        return this;\n    };\n    AsyncAction.prototype.requestAsyncId = function (scheduler, id, delay) {\n        if (delay === void 0) {\n            delay = 0;\n        }\n        return root.setInterval(scheduler.flush.bind(scheduler, this), delay);\n    };\n    AsyncAction.prototype.recycleAsyncId = function (scheduler, id, delay) {\n        if (delay === void 0) {\n            delay = 0;\n        }\n        // If this action is rescheduled with the same delay time, don't clear the interval id.\n        if (delay !== null && this.delay === delay && this.pending === false) {\n            return id;\n        }\n        // Otherwise, if the action's delay time is different from the current delay,\n        // or the action has been rescheduled before it's executed, clear the interval id\n        return root.clearInterval(id) && undefined || undefined;\n    };\n    /**\n     * Immediately executes this action and the `work` it contains.\n     * @return {any}\n     */\n    AsyncAction.prototype.execute = function (state, delay) {\n        if (this.closed) {\n            return new Error('executing a cancelled action');\n        }\n        this.pending = false;\n        var error = this._execute(state, delay);\n        if (error) {\n            return error;\n        }\n        else if (this.pending === false && this.id != null) {\n            // Dequeue if the action didn't reschedule itself. Don't call\n            // unsubscribe(), because the action could reschedule later.\n            // For example:\n            // ```\n            // scheduler.schedule(function doWork(counter) {\n            //   /* ... I'm a busy worker bee ... */\n            //   var originalAction = this;\n            //   /* wait 100ms before rescheduling the action */\n            //   setTimeout(function () {\n            //     originalAction.schedule(counter + 1);\n            //   }, 100);\n            // }, 1000);\n            // ```\n            this.id = this.recycleAsyncId(this.scheduler, this.id, null);\n        }\n    };\n    AsyncAction.prototype._execute = function (state, delay) {\n        var errored = false;\n        var errorValue = undefined;\n        try {\n            this.work(state);\n        }\n        catch (e) {\n            errored = true;\n            errorValue = !!e && e || new Error(e);\n        }\n        if (errored) {\n            this.unsubscribe();\n            return errorValue;\n        }\n    };\n    AsyncAction.prototype._unsubscribe = function () {\n        var id = this.id;\n        var scheduler = this.scheduler;\n        var actions = scheduler.actions;\n        var index = actions.indexOf(this);\n        this.work = null;\n        this.state = null;\n        this.pending = false;\n        this.scheduler = null;\n        if (index !== -1) {\n            actions.splice(index, 1);\n        }\n        if (id != null) {\n            this.id = this.recycleAsyncId(scheduler, id, null);\n        }\n        this.delay = null;\n    };\n    return AsyncAction;\n}(Action));\n//# sourceMappingURL=AsyncAction.js.map \n\n\n\n// WEBPACK FOOTER //\n// /Users/jr/dev/demo/explore-ng-bundles/myapp/node_modules/rxjs/_esm5/scheduler/AsyncAction.js.pre-build-optimizer.js","/** PURE_IMPORTS_START .._Subscription PURE_IMPORTS_END */\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b)\n        if (b.hasOwnProperty(p))\n            d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nimport { Subscription } from '../Subscription';\n/**\n * A unit of work to be executed in a {@link Scheduler}. An action is typically\n * created from within a Scheduler and an RxJS user does not need to concern\n * themselves about creating and manipulating an Action.\n *\n * ```ts\n * class Action<T> extends Subscription {\n *   new (scheduler: Scheduler, work: (state?: T) => void);\n *   schedule(state?: T, delay: number = 0): Subscription;\n * }\n * ```\n *\n * @class Action<T>\n */\nexport var Action = /*@__PURE__*/ (/*@__PURE__*/ function (_super) {\n    __extends(Action, _super);\n    function Action(scheduler, work) {\n        _super.call(this);\n    }\n    /**\n     * Schedules this action on its parent Scheduler for execution. May be passed\n     * some context object, `state`. May happen at some point in the future,\n     * according to the `delay` parameter, if specified.\n     * @param {T} [state] Some contextual data that the `work` function uses when\n     * called by the Scheduler.\n     * @param {number} [delay] Time to wait before executing the work, where the\n     * time unit is implicit and defined by the Scheduler.\n     * @return {void}\n     */\n    Action.prototype.schedule = function (state, delay) {\n        if (delay === void 0) {\n            delay = 0;\n        }\n        return this;\n    };\n    return Action;\n}(Subscription));\n//# sourceMappingURL=Action.js.map \n\n\n\n// WEBPACK FOOTER //\n// /Users/jr/dev/demo/explore-ng-bundles/myapp/node_modules/rxjs/_esm5/scheduler/Action.js.pre-build-optimizer.js","/** PURE_IMPORTS_START ._AsyncAction,._AsyncScheduler PURE_IMPORTS_END */\nimport { AsyncAction } from './AsyncAction';\nimport { AsyncScheduler } from './AsyncScheduler';\n/**\n *\n * Async Scheduler\n *\n * <span class=\"informal\">Schedule task as if you used setTimeout(task, duration)</span>\n *\n * `async` scheduler schedules tasks asynchronously, by putting them on the JavaScript\n * event loop queue. It is best used to delay tasks in time or to schedule tasks repeating\n * in intervals.\n *\n * If you just want to \"defer\" task, that is to perform it right after currently\n * executing synchronous code ends (commonly achieved by `setTimeout(deferredTask, 0)`),\n * better choice will be the {@link asap} scheduler.\n *\n * @example <caption>Use async scheduler to delay task</caption>\n * const task = () => console.log('it works!');\n *\n * Rx.Scheduler.async.schedule(task, 2000);\n *\n * // After 2 seconds logs:\n * // \"it works!\"\n *\n *\n * @example <caption>Use async scheduler to repeat task in intervals</caption>\n * function task(state) {\n *   console.log(state);\n *   this.schedule(state + 1, 1000); // `this` references currently executing Action,\n *                                   // which we reschedule with new state and delay\n * }\n *\n * Rx.Scheduler.async.schedule(task, 3000, 0);\n *\n * // Logs:\n * // 0 after 3s\n * // 1 after 4s\n * // 2 after 5s\n * // 3 after 6s\n *\n * @static true\n * @name async\n * @owner Scheduler\n */\nexport var async = /*@__PURE__*/ new AsyncScheduler(AsyncAction);\n//# sourceMappingURL=async.js.map \n\n\n\n//////////////////\n// WEBPACK FOOTER\n// /Users/jr/dev/demo/explore-ng-bundles/myapp/node_modules/rxjs/_esm5/scheduler/async.js\n// module id = null\n// module chunks = ","/** PURE_IMPORTS_START .._Scheduler PURE_IMPORTS_END */\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b)\n        if (b.hasOwnProperty(p))\n            d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nimport { Scheduler } from '../Scheduler';\nexport var AsyncScheduler = /*@__PURE__*/ (/*@__PURE__*/ function (_super) {\n    __extends(AsyncScheduler, _super);\n    function AsyncScheduler() {\n        _super.apply(this, arguments);\n        this.actions = [];\n        /**\n         * A flag to indicate whether the Scheduler is currently executing a batch of\n         * queued actions.\n         * @type {boolean}\n         */\n        this.active = false;\n        /**\n         * An internal ID used to track the latest asynchronous task such as those\n         * coming from `setTimeout`, `setInterval`, `requestAnimationFrame`, and\n         * others.\n         * @type {any}\n         */\n        this.scheduled = undefined;\n    }\n    AsyncScheduler.prototype.flush = function (action) {\n        var actions = this.actions;\n        if (this.active) {\n            actions.push(action);\n            return;\n        }\n        var error;\n        this.active = true;\n        do {\n            if (error = action.execute(action.state, action.delay)) {\n                break;\n            }\n        } while (action = actions.shift()); // exhaust the scheduler queue\n        this.active = false;\n        if (error) {\n            while (action = actions.shift()) {\n                action.unsubscribe();\n            }\n            throw error;\n        }\n    };\n    return AsyncScheduler;\n}(Scheduler));\n//# sourceMappingURL=AsyncScheduler.js.map \n\n\n\n// WEBPACK FOOTER //\n// /Users/jr/dev/demo/explore-ng-bundles/myapp/node_modules/rxjs/_esm5/scheduler/AsyncScheduler.js.pre-build-optimizer.js","/**\n * An execution context and a data structure to order tasks and schedule their\n * execution. Provides a notion of (potentially virtual) time, through the\n * `now()` getter method.\n *\n * Each unit of work in a Scheduler is called an {@link Action}.\n *\n * ```ts\n * class Scheduler {\n *   now(): number;\n *   schedule(work, delay?, state?): Subscription;\n * }\n * ```\n *\n * @class Scheduler\n */\nexport var Scheduler = /*@__PURE__*/ (/*@__PURE__*/ function () {\n    function Scheduler(SchedulerAction, now) {\n        if (now === void 0) {\n            now = Scheduler.now;\n        }\n        this.SchedulerAction = SchedulerAction;\n        this.now = now;\n    }\n    /**\n     * Schedules a function, `work`, for execution. May happen at some point in\n     * the future, according to the `delay` parameter, if specified. May be passed\n     * some context object, `state`, which will be passed to the `work` function.\n     *\n     * The given arguments will be processed an stored as an Action object in a\n     * queue of actions.\n     *\n     * @param {function(state: ?T): ?Subscription} work A function representing a\n     * task, or some unit of work to be executed by the Scheduler.\n     * @param {number} [delay] Time to wait before executing the work, where the\n     * time unit is implicit and defined by the Scheduler itself.\n     * @param {T} [state] Some contextual data that the `work` function uses when\n     * called by the Scheduler.\n     * @return {Subscription} A subscription in order to be able to unsubscribe\n     * the scheduled work.\n     */\n    Scheduler.prototype.schedule = function (work, delay, state) {\n        if (delay === void 0) {\n            delay = 0;\n        }\n        return new this.SchedulerAction(this, work).schedule(state, delay);\n    };\n    Scheduler.now = Date.now ? Date.now : function () { return +new Date(); };\n    return Scheduler;\n}());\n//# sourceMappingURL=Scheduler.js.map \n\n\n\n// WEBPACK FOOTER //\n// /Users/jr/dev/demo/explore-ng-bundles/myapp/node_modules/rxjs/_esm5/Scheduler.js.pre-build-optimizer.js","/** PURE_IMPORTS_START .._.._Observable,.._.._observable_interval PURE_IMPORTS_END */\nimport { Observable } from '../../Observable';\nimport { interval as staticInterval } from '../../observable/interval';\nObservable.interval = staticInterval;\n//# sourceMappingURL=interval.js.map \n\n\n\n//////////////////\n// WEBPACK FOOTER\n// /Users/jr/dev/demo/explore-ng-bundles/myapp/node_modules/rxjs/_esm5/add/observable/interval.js\n// module id = null\n// module chunks = ","/** PURE_IMPORTS_START .._util_isNumeric,.._Observable,.._scheduler_async PURE_IMPORTS_END */\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b)\n        if (b.hasOwnProperty(p))\n            d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nimport { isNumeric } from '../util/isNumeric';\nimport { Observable } from '../Observable';\nimport { async } from '../scheduler/async';\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @extends {Ignored}\n * @hide true\n */\nexport var IntervalObservable = /*@__PURE__*/ (/*@__PURE__*/ function (_super) {\n    __extends(IntervalObservable, _super);\n    function IntervalObservable(period, scheduler) {\n        if (period === void 0) {\n            period = 0;\n        }\n        if (scheduler === void 0) {\n            scheduler = async;\n        }\n        _super.call(this);\n        this.period = period;\n        this.scheduler = scheduler;\n        if (!isNumeric(period) || period < 0) {\n            this.period = 0;\n        }\n        if (!scheduler || typeof scheduler.schedule !== 'function') {\n            this.scheduler = async;\n        }\n    }\n    /**\n     * Creates an Observable that emits sequential numbers every specified\n     * interval of time, on a specified IScheduler.\n     *\n     * <span class=\"informal\">Emits incremental numbers periodically in time.\n     * </span>\n     *\n     * <img src=\"./img/interval.png\" width=\"100%\">\n     *\n     * `interval` returns an Observable that emits an infinite sequence of\n     * ascending integers, with a constant interval of time of your choosing\n     * between those emissions. The first emission is not sent immediately, but\n     * only after the first period has passed. By default, this operator uses the\n     * `async` IScheduler to provide a notion of time, but you may pass any\n     * IScheduler to it.\n     *\n     * @example <caption>Emits ascending numbers, one every second (1000ms)</caption>\n     * var numbers = Rx.Observable.interval(1000);\n     * numbers.subscribe(x => console.log(x));\n     *\n     * @see {@link timer}\n     * @see {@link delay}\n     *\n     * @param {number} [period=0] The interval size in milliseconds (by default)\n     * or the time unit determined by the scheduler's clock.\n     * @param {Scheduler} [scheduler=async] The IScheduler to use for scheduling\n     * the emission of values, and providing a notion of \"time\".\n     * @return {Observable} An Observable that emits a sequential number each time\n     * interval.\n     * @static true\n     * @name interval\n     * @owner Observable\n     */\n    IntervalObservable.create = function (period, scheduler) {\n        if (period === void 0) {\n            period = 0;\n        }\n        if (scheduler === void 0) {\n            scheduler = async;\n        }\n        return new IntervalObservable(period, scheduler);\n    };\n    IntervalObservable.dispatch = function (state) {\n        var index = state.index, subscriber = state.subscriber, period = state.period;\n        subscriber.next(index);\n        if (subscriber.closed) {\n            return;\n        }\n        state.index += 1;\n        this.schedule(state, period);\n    };\n    IntervalObservable.prototype._subscribe = function (subscriber) {\n        var index = 0;\n        var period = this.period;\n        var scheduler = this.scheduler;\n        subscriber.add(scheduler.schedule(IntervalObservable.dispatch, period, {\n            index: index, subscriber: subscriber, period: period\n        }));\n    };\n    return IntervalObservable;\n}(Observable));\n//# sourceMappingURL=IntervalObservable.js.map \n\n\n\n// WEBPACK FOOTER //\n// /Users/jr/dev/demo/explore-ng-bundles/myapp/node_modules/rxjs/_esm5/observable/IntervalObservable.js.pre-build-optimizer.js","/** PURE_IMPORTS_START .._util_isArray PURE_IMPORTS_END */\nimport { isArray } from '../util/isArray';\nexport function isNumeric(val) {\n    // parseFloat NaNs numeric-cast false positives (null|true|false|\"\")\n    // ...but misinterprets leading-number strings, particularly hex literals (\"0x...\")\n    // subtraction forces infinities to NaN\n    // adding 1 corrects loss of precision from parseFloat (#15100)\n    return !isArray(val) && (val - parseFloat(val) + 1) >= 0;\n}\n;\n//# sourceMappingURL=isNumeric.js.map \n\n\n\n//////////////////\n// WEBPACK FOOTER\n// /Users/jr/dev/demo/explore-ng-bundles/myapp/node_modules/rxjs/_esm5/util/isNumeric.js\n// module id = null\n// module chunks = ","/** PURE_IMPORTS_START ._IntervalObservable PURE_IMPORTS_END */\nimport { IntervalObservable } from './IntervalObservable';\nexport var interval = IntervalObservable.create;\n//# sourceMappingURL=interval.js.map \n\n\n\n//////////////////\n// WEBPACK FOOTER\n// /Users/jr/dev/demo/explore-ng-bundles/myapp/node_modules/rxjs/_esm5/observable/interval.js\n// module id = null\n// module chunks = ","/** PURE_IMPORTS_START .._Subscriber PURE_IMPORTS_END */\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b)\n        if (b.hasOwnProperty(p))\n            d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nimport { Subscriber } from '../Subscriber';\n/**\n * Groups pairs of consecutive emissions together and emits them as an array of\n * two values.\n *\n * <span class=\"informal\">Puts the current value and previous value together as\n * an array, and emits that.</span>\n *\n * <img src=\"./img/pairwise.png\" width=\"100%\">\n *\n * The Nth emission from the source Observable will cause the output Observable\n * to emit an array [(N-1)th, Nth] of the previous and the current value, as a\n * pair. For this reason, `pairwise` emits on the second and subsequent\n * emissions from the source Observable, but not on the first emission, because\n * there is no previous value in that case.\n *\n * @example <caption>On every click (starting from the second), emit the relative distance to the previous click</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var pairs = clicks.pairwise();\n * var distance = pairs.map(pair => {\n *   var x0 = pair[0].clientX;\n *   var y0 = pair[0].clientY;\n *   var x1 = pair[1].clientX;\n *   var y1 = pair[1].clientY;\n *   return Math.sqrt(Math.pow(x0 - x1, 2) + Math.pow(y0 - y1, 2));\n * });\n * distance.subscribe(x => console.log(x));\n *\n * @see {@link buffer}\n * @see {@link bufferCount}\n *\n * @return {Observable<Array<T>>} An Observable of pairs (as arrays) of\n * consecutive values from the source Observable.\n * @method pairwise\n * @owner Observable\n */\nexport function pairwise() {\n    return function (source) { return source.lift(new PairwiseOperator()); };\n}\nvar PairwiseOperator = /*@__PURE__*/ (/*@__PURE__*/ function () {\n    function PairwiseOperator() {\n    }\n    PairwiseOperator.prototype.call = function (subscriber, source) {\n        return source.subscribe(new PairwiseSubscriber(subscriber));\n    };\n    return PairwiseOperator;\n}());\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar PairwiseSubscriber = /*@__PURE__*/ (/*@__PURE__*/ function (_super) {\n    __extends(PairwiseSubscriber, _super);\n    function PairwiseSubscriber(destination) {\n        _super.call(this, destination);\n        this.hasPrev = false;\n    }\n    PairwiseSubscriber.prototype._next = function (value) {\n        if (this.hasPrev) {\n            this.destination.next([this.prev, value]);\n        }\n        else {\n            this.hasPrev = true;\n        }\n        this.prev = value;\n    };\n    return PairwiseSubscriber;\n}(Subscriber));\n//# sourceMappingURL=pairwise.js.map \n\n\n\n// WEBPACK FOOTER //\n// /Users/jr/dev/demo/explore-ng-bundles/myapp/node_modules/rxjs/_esm5/operators/pairwise.js.pre-build-optimizer.js","/** PURE_IMPORTS_START .._.._Observable,.._.._operator_pairwise PURE_IMPORTS_END */\nimport { Observable } from '../../Observable';\nimport { pairwise } from '../../operator/pairwise';\nObservable.prototype.pairwise = pairwise;\n//# sourceMappingURL=pairwise.js.map \n\n\n\n//////////////////\n// WEBPACK FOOTER\n// /Users/jr/dev/demo/explore-ng-bundles/myapp/node_modules/rxjs/_esm5/add/operator/pairwise.js\n// module id = null\n// module chunks = ","/** PURE_IMPORTS_START .._operators_pairwise PURE_IMPORTS_END */\nimport { pairwise as higherOrder } from '../operators/pairwise';\n/**\n * Groups pairs of consecutive emissions together and emits them as an array of\n * two values.\n *\n * <span class=\"informal\">Puts the current value and previous value together as\n * an array, and emits that.</span>\n *\n * <img src=\"./img/pairwise.png\" width=\"100%\">\n *\n * The Nth emission from the source Observable will cause the output Observable\n * to emit an array [(N-1)th, Nth] of the previous and the current value, as a\n * pair. For this reason, `pairwise` emits on the second and subsequent\n * emissions from the source Observable, but not on the first emission, because\n * there is no previous value in that case.\n *\n * @example <caption>On every click (starting from the second), emit the relative distance to the previous click</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var pairs = clicks.pairwise();\n * var distance = pairs.map(pair => {\n *   var x0 = pair[0].clientX;\n *   var y0 = pair[0].clientY;\n *   var x1 = pair[1].clientX;\n *   var y1 = pair[1].clientY;\n *   return Math.sqrt(Math.pow(x0 - x1, 2) + Math.pow(y0 - y1, 2));\n * });\n * distance.subscribe(x => console.log(x));\n *\n * @see {@link buffer}\n * @see {@link bufferCount}\n *\n * @return {Observable<Array<T>>} An Observable of pairs (as arrays) of\n * consecutive values from the source Observable.\n * @method pairwise\n * @owner Observable\n */\nexport function pairwise() {\n    return higherOrder()(this);\n}\n//# sourceMappingURL=pairwise.js.map \n\n\n\n//////////////////\n// WEBPACK FOOTER\n// /Users/jr/dev/demo/explore-ng-bundles/myapp/node_modules/rxjs/_esm5/operator/pairwise.js\n// module id = null\n// module chunks = ","/** PURE_IMPORTS_START .._Subscriber,.._util_ArgumentOutOfRangeError,.._observable_EmptyObservable PURE_IMPORTS_END */\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b)\n        if (b.hasOwnProperty(p))\n            d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nimport { Subscriber } from '../Subscriber';\nimport { ArgumentOutOfRangeError } from '../util/ArgumentOutOfRangeError';\nimport { EmptyObservable } from '../observable/EmptyObservable';\n/**\n * Emits only the first `count` values emitted by the source Observable.\n *\n * <span class=\"informal\">Takes the first `count` values from the source, then\n * completes.</span>\n *\n * <img src=\"./img/take.png\" width=\"100%\">\n *\n * `take` returns an Observable that emits only the first `count` values emitted\n * by the source Observable. If the source emits fewer than `count` values then\n * all of its values are emitted. After that, it completes, regardless if the\n * source completes.\n *\n * @example <caption>Take the first 5 seconds of an infinite 1-second interval Observable</caption>\n * var interval = Rx.Observable.interval(1000);\n * var five = interval.take(5);\n * five.subscribe(x => console.log(x));\n *\n * @see {@link takeLast}\n * @see {@link takeUntil}\n * @see {@link takeWhile}\n * @see {@link skip}\n *\n * @throws {ArgumentOutOfRangeError} When using `take(i)`, it delivers an\n * ArgumentOutOrRangeError to the Observer's `error` callback if `i < 0`.\n *\n * @param {number} count The maximum number of `next` values to emit.\n * @return {Observable<T>} An Observable that emits only the first `count`\n * values emitted by the source Observable, or all of the values from the source\n * if the source emits fewer than `count` values.\n * @method take\n * @owner Observable\n */\nexport function take(count) {\n    return function (source) {\n        if (count === 0) {\n            return new EmptyObservable();\n        }\n        else {\n            return source.lift(new TakeOperator(count));\n        }\n    };\n}\nvar TakeOperator = /*@__PURE__*/ (/*@__PURE__*/ function () {\n    function TakeOperator(total) {\n        this.total = total;\n        if (this.total < 0) {\n            throw new ArgumentOutOfRangeError;\n        }\n    }\n    TakeOperator.prototype.call = function (subscriber, source) {\n        return source.subscribe(new TakeSubscriber(subscriber, this.total));\n    };\n    return TakeOperator;\n}());\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar TakeSubscriber = /*@__PURE__*/ (/*@__PURE__*/ function (_super) {\n    __extends(TakeSubscriber, _super);\n    function TakeSubscriber(destination, total) {\n        _super.call(this, destination);\n        this.total = total;\n        this.count = 0;\n    }\n    TakeSubscriber.prototype._next = function (value) {\n        var total = this.total;\n        var count = ++this.count;\n        if (count <= total) {\n            this.destination.next(value);\n            if (count === total) {\n                this.destination.complete();\n                this.unsubscribe();\n            }\n        }\n    };\n    return TakeSubscriber;\n}(Subscriber));\n//# sourceMappingURL=take.js.map \n\n\n\n// WEBPACK FOOTER //\n// /Users/jr/dev/demo/explore-ng-bundles/myapp/node_modules/rxjs/_esm5/operators/take.js.pre-build-optimizer.js","/** PURE_IMPORTS_START .._.._Observable,.._.._operator_take PURE_IMPORTS_END */\nimport { Observable } from '../../Observable';\nimport { take } from '../../operator/take';\nObservable.prototype.take = take;\n//# sourceMappingURL=take.js.map \n\n\n\n//////////////////\n// WEBPACK FOOTER\n// /Users/jr/dev/demo/explore-ng-bundles/myapp/node_modules/rxjs/_esm5/add/operator/take.js\n// module id = null\n// module chunks = ","/** PURE_IMPORTS_START .._operators_take PURE_IMPORTS_END */\nimport { take as higherOrder } from '../operators/take';\n/**\n * Emits only the first `count` values emitted by the source Observable.\n *\n * <span class=\"informal\">Takes the first `count` values from the source, then\n * completes.</span>\n *\n * <img src=\"./img/take.png\" width=\"100%\">\n *\n * `take` returns an Observable that emits only the first `count` values emitted\n * by the source Observable. If the source emits fewer than `count` values then\n * all of its values are emitted. After that, it completes, regardless if the\n * source completes.\n *\n * @example <caption>Take the first 5 seconds of an infinite 1-second interval Observable</caption>\n * var interval = Rx.Observable.interval(1000);\n * var five = interval.take(5);\n * five.subscribe(x => console.log(x));\n *\n * @see {@link takeLast}\n * @see {@link takeUntil}\n * @see {@link takeWhile}\n * @see {@link skip}\n *\n * @throws {ArgumentOutOfRangeError} When using `take(i)`, it delivers an\n * ArgumentOutOrRangeError to the Observer's `error` callback if `i < 0`.\n *\n * @param {number} count The maximum number of `next` values to emit.\n * @return {Observable<T>} An Observable that emits only the first `count`\n * values emitted by the source Observable, or all of the values from the source\n * if the source emits fewer than `count` values.\n * @method take\n * @owner Observable\n */\nexport function take(count) {\n    return higherOrder(count)(this);\n}\n//# sourceMappingURL=take.js.map \n\n\n\n//////////////////\n// WEBPACK FOOTER\n// /Users/jr/dev/demo/explore-ng-bundles/myapp/node_modules/rxjs/_esm5/operator/take.js\n// module id = null\n// module chunks = ","import { Component, OnInit } from '@angular/core';\n\nimport { Observable } from 'rxjs/Observable';\nimport 'rxjs/add/observable/interval';\nimport 'rxjs/add/operator/pairwise';\nimport 'rxjs/add/operator/take';\n\n@Component({\n  selector: 'app-my-lazy',\n  templateUrl: './my-lazy.component.html',\n  styleUrls: ['./my-lazy.component.scss']\n})\nexport class MyLazyComponent implements OnInit {\n\n  constructor() { }\n\n  ngOnInit() {\n    const interval = Observable.interval(1000);\n\n    // Returns: [0,1], [1,2], [2,3], [3,4], [4,5]\n    interval\n      .pairwise()\n      .take(5)\n      .subscribe(console.log);\n  }\n}\n\n\n\n// WEBPACK FOOTER //\n// /Users/jr/dev/demo/explore-ng-bundles/myapp/src/app/lazy/my-lazy/my-lazy.component.ts","/**\n * @fileoverview This file was generated by the Angular template compiler. Do not edit.\n *\n * @suppress {suspiciousCode,uselessCode,missingProperties,missingOverride,checkTypes}\n * tslint:disable\n */ \nimport * as i0 from \"./my-lazy.component.scss.shim.ngstyle\";\nimport * as i1 from \"@angular/core\";\nimport * as i2 from \"./my-lazy.component\";\nvar styles_MyLazyComponent = [i0.styles];\nvar RenderType_MyLazyComponent = i1.ɵcrt({ encapsulation: 0, styles: styles_MyLazyComponent, data: {} });\nexport { RenderType_MyLazyComponent as RenderType_MyLazyComponent };\nexport function View_MyLazyComponent_0(_l) { return i1.ɵvid(0, [(_l()(), i1.ɵeld(0, 0, null, null, 1, \"p\", [], null, null, null, null, null)), (_l()(), i1.ɵted(-1, null, [\"\\n  I'm lazy loaded!\\n\"])), (_l()(), i1.ɵted(-1, null, [\"\\n\"]))], null, null); }\nexport function View_MyLazyComponent_Host_0(_l) { return i1.ɵvid(0, [(_l()(), i1.ɵeld(0, 0, null, null, 1, \"app-my-lazy\", [], null, null, null, View_MyLazyComponent_0, RenderType_MyLazyComponent)), i1.ɵdid(1, 114688, null, 0, i2.MyLazyComponent, [], null, null)], function (_ck, _v) { _ck(_v, 1, 0); }, null); }\nvar MyLazyComponentNgFactory = i1.ɵccf(\"app-my-lazy\", i2.MyLazyComponent, View_MyLazyComponent_Host_0, {}, {}, []);\nexport { MyLazyComponentNgFactory as MyLazyComponentNgFactory };\n\n\n\n// WEBPACK FOOTER //\n// /Users/jr/dev/demo/explore-ng-bundles/myapp/src/app/lazy/my-lazy/my-lazy.component.ngfactory.js.pre-build-optimizer.js","/**\n * @fileoverview This file was generated by the Angular template compiler. Do not edit.\n *\n * @suppress {suspiciousCode,uselessCode,missingProperties,missingOverride,checkTypes}\n * tslint:disable\n */ \nvar styles = [\"\"];\nexport { styles as styles };\n\n\n\n// WEBPACK FOOTER //\n// /Users/jr/dev/demo/explore-ng-bundles/myapp/src/app/lazy/my-lazy/my-lazy.component.scss.shim.ngstyle.js.pre-build-optimizer.js","<p>\n  I'm lazy loaded!\n</p>\n\n\n\n// WEBPACK FOOTER //\n// /Users/jr/dev/demo/explore-ng-bundles/myapp/src/app/lazy/my-lazy/my-lazy.component.html","import { NgModule } from '@angular/core';\nimport { Routes, RouterModule } from '@angular/router';\n\nimport { MyLazyComponent } from './my-lazy/my-lazy.component';\n\nconst routes: Routes = [\n  {\n    path: '',\n    component: MyLazyComponent\n  }\n];\n\n@NgModule({\n  imports: [RouterModule.forChild(routes)],\n  exports: [RouterModule]\n})\nexport class LazyRoutingModule { }\n\n\n\n// WEBPACK FOOTER //\n// /Users/jr/dev/demo/explore-ng-bundles/myapp/src/app/lazy/lazy-routing.module.ts","/**\n * @fileoverview This file was generated by the Angular template compiler. Do not edit.\n *\n * @suppress {suspiciousCode,uselessCode,missingProperties,missingOverride,checkTypes}\n * tslint:disable\n */ \nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"./lazy.module\";\nimport * as i2 from \"./my-lazy/my-lazy.component.ngfactory\";\nimport * as i3 from \"@angular/common\";\nimport * as i4 from \"@angular/router\";\nimport * as i5 from \"./lazy-routing.module\";\nimport * as i6 from \"./my-lazy/my-lazy.component\";\nvar LazyModuleNgFactory = i0.ɵcmf(i1.LazyModule, [], function (_l) { return i0.ɵmod([i0.ɵmpd(512, i0.ComponentFactoryResolver, i0.ɵCodegenComponentFactoryResolver, [[8, [i2.MyLazyComponentNgFactory]], [3, i0.ComponentFactoryResolver], i0.NgModuleRef]), i0.ɵmpd(4608, i3.NgLocalization, i3.NgLocaleLocalization, [i0.LOCALE_ID, [2, i3.ɵa]]), i0.ɵmpd(512, i3.CommonModule, i3.CommonModule, []), i0.ɵmpd(512, i4.RouterModule, i4.RouterModule, [[2, i4.ɵa], [2, i4.Router]]), i0.ɵmpd(512, i5.LazyRoutingModule, i5.LazyRoutingModule, []), i0.ɵmpd(512, i1.LazyModule, i1.LazyModule, []), i0.ɵmpd(1024, i4.ROUTES, function () { return [[{ path: \"\", component: i6.MyLazyComponent }]]; }, [])]); });\nexport { LazyModuleNgFactory as LazyModuleNgFactory };\n\n\n\n// WEBPACK FOOTER //\n// /Users/jr/dev/demo/explore-ng-bundles/myapp/src/app/lazy/lazy.module.ngfactory.js.pre-build-optimizer.js"],"sourceRoot":"webpack:///"}